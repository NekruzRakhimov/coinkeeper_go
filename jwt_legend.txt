JWT (JSON Web Token) — это стандартный формат для безопасной передачи данных между сторонами в
виде JSON-объекта. JWT широко используется для аутентификации и авторизации в веб-приложениях
и API.
----------------------------------------------------------------------------------------------------
----------------------------Структура JWT-----------------------------------------------------------
----------------------------------------------------------------------------------------------------
JWT состоит из трех частей, разделённых точками:

Header (Заголовок): Указывает тип токена и алгоритм подписи, используемый для его создания.
Пример заголовка (JSON):

json
{
  "alg": "HS256",
  "typ": "JWT"
}
Этот заголовок указывает, что токен подписан с использованием алгоритма HMAC SHA-256 и его тип — JWT.

Payload (Полезная нагрузка): Содержит данные, которые вы хотите передать. В payload могут находиться как стандартные, так и кастомные поля.
Пример payload (JSON):

json
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
В примере поля sub (Subject), name и iat (Issued At) являются частью полезной нагрузки. Поля payload могут быть стандартными (например, iat, exp, sub) или кастомными, в зависимости от ваших нужд.
Signature (Подпись): Гарантирует, что токен не был изменён. Подпись создается путем объединения заголовка и полезной нагрузки и их подписи с использованием алгоритма и секретного ключа.
Для создания подписи используется следующий процесс:

Кодируем заголовок и полезную нагрузку в Base64Url.
Объединяем закодированные заголовок и полезную нагрузку, разделенные точкой.
Подписываем полученную строку с использованием алгоритма и секретного ключа.
Кодируем результат подписи в Base64Url.

Пример формирования подписи:

plaintext
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
Пример JWT
Пример JWT может выглядеть следующим образом:

eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9.VGhpcyBpcyBhIHNhbXBsZSBzaWduYXR1cmUu

----------------------------------------------------------------------------------------------------
----------------------------Разделение токена на части----------------------------------------------
----------------------------------------------------------------------------------------------------
Header:
json
{
  "alg": "HS256",
  "typ": "JWT"
}
Base64Url: eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9
Payload:
json
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
Base64Url: eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9
Signature:
plaintext
VGhpcyBpcyBhIHNhbXBsZSBzaWduYXR1cmUu

----------------------------------------------------------------------------------------------------
----------------------------Преимущества JWT--------------------------------------------------------
----------------------------------------------------------------------------------------------------
Безопасность:
Подпись обеспечивает целостность данных и проверяет подлинность токена.

Самодостаточность:
JWT содержит все необходимые данные в самом токене, что уменьшает
необходимость частого обращения к базе данных.

Масштабируемость:
JWT не требует сохранения состояния на сервере, что упрощает масштабирование приложений.

Применение JWT
Аутентификация:
JWT часто используется для аутентификации пользователей в приложениях. После входа
пользователя выдается JWT, который можно использовать для подтверждения его идентичности
при последующих запросах.

Авторизация:
JWT может содержать информацию о разрешениях и ролях пользователя, что позволяет
контролировать доступ к различным ресурсам.

Обмен данными:
JWT может использоваться для безопасного
обмена информацией между различными сервисами.